// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	todo "todo-app"
)

// ToDoList is an autogenerated mock type for the ToDoList type
type ToDoList struct {
	mock.Mock
}

// Create provides a mock function with given fields: userID, list
func (_m *ToDoList) Create(userID int, list todo.ToDoList) (int, error) {
	ret := _m.Called(userID, list)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int, todo.ToDoList) (int, error)); ok {
		return rf(userID, list)
	}
	if rf, ok := ret.Get(0).(func(int, todo.ToDoList) int); ok {
		r0 = rf(userID, list)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, todo.ToDoList) error); ok {
		r1 = rf(userID, list)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userID, listID
func (_m *ToDoList) Delete(userID int, listID int) error {
	ret := _m.Called(userID, listID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userID, listID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: userID
func (_m *ToDoList) GetAll(userID int) ([]todo.ToDoList, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []todo.ToDoList
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]todo.ToDoList, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []todo.ToDoList); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]todo.ToDoList)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: userID, listID
func (_m *ToDoList) GetByID(userID int, listID int) (todo.ToDoList, error) {
	ret := _m.Called(userID, listID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 todo.ToDoList
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (todo.ToDoList, error)); ok {
		return rf(userID, listID)
	}
	if rf, ok := ret.Get(0).(func(int, int) todo.ToDoList); ok {
		r0 = rf(userID, listID)
	} else {
		r0 = ret.Get(0).(todo.ToDoList)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userID, listID, input
func (_m *ToDoList) Update(userID int, listID int, input todo.UpdateListInput) error {
	ret := _m.Called(userID, listID, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, todo.UpdateListInput) error); ok {
		r0 = rf(userID, listID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewToDoList creates a new instance of ToDoList. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewToDoList(t interface {
	mock.TestingT
	Cleanup(func())
}) *ToDoList {
	mock := &ToDoList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
