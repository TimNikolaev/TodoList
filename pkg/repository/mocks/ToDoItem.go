// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	todo "todo-app"
)

// ToDoItem is an autogenerated mock type for the ToDoItem type
type ToDoItem struct {
	mock.Mock
}

// Create provides a mock function with given fields: listID, item
func (_m *ToDoItem) Create(listID int, item todo.ToDoItem) (int, error) {
	ret := _m.Called(listID, item)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int, todo.ToDoItem) (int, error)); ok {
		return rf(listID, item)
	}
	if rf, ok := ret.Get(0).(func(int, todo.ToDoItem) int); ok {
		r0 = rf(listID, item)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, todo.ToDoItem) error); ok {
		r1 = rf(listID, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userID, itemID
func (_m *ToDoItem) Delete(userID int, itemID int) error {
	ret := _m.Called(userID, itemID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userID, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: userID, listID
func (_m *ToDoItem) GetAll(userID int, listID int) ([]todo.ToDoItem, error) {
	ret := _m.Called(userID, listID)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []todo.ToDoItem
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]todo.ToDoItem, error)); ok {
		return rf(userID, listID)
	}
	if rf, ok := ret.Get(0).(func(int, int) []todo.ToDoItem); ok {
		r0 = rf(userID, listID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]todo.ToDoItem)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: userID, itemID
func (_m *ToDoItem) GetByID(userID int, itemID int) (todo.ToDoItem, error) {
	ret := _m.Called(userID, itemID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 todo.ToDoItem
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (todo.ToDoItem, error)); ok {
		return rf(userID, itemID)
	}
	if rf, ok := ret.Get(0).(func(int, int) todo.ToDoItem); ok {
		r0 = rf(userID, itemID)
	} else {
		r0 = ret.Get(0).(todo.ToDoItem)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, itemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userID, itemID, input
func (_m *ToDoItem) Update(userID int, itemID int, input todo.UpdateItemInput) error {
	ret := _m.Called(userID, itemID, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, todo.UpdateItemInput) error); ok {
		r0 = rf(userID, itemID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewToDoItem creates a new instance of ToDoItem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewToDoItem(t interface {
	mock.TestingT
	Cleanup(func())
}) *ToDoItem {
	mock := &ToDoItem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
